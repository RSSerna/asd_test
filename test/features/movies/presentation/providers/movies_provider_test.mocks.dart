// Mocks generated by Mockito 5.4.5 from annotations
// in asd_test/test/features/movies/presentation/providers/movies_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:asd_test/core/errors/failures.dart' as _i6;
import 'package:asd_test/core/usecase/usecase.dart' as _i15;
import 'package:asd_test/features/movies/domain/entities/add_remove_fav_param.dart'
    as _i17;
import 'package:asd_test/features/movies/domain/entities/cast_entity.dart'
    as _i7;
import 'package:asd_test/features/movies/domain/entities/get_movie_cast_param.dart'
    as _i8;
import 'package:asd_test/features/movies/domain/entities/get_popular_movie_param.dart'
    as _i11;
import 'package:asd_test/features/movies/domain/entities/movie_entity.dart'
    as _i10;
import 'package:asd_test/features/movies/domain/entities/search_movie_param.dart'
    as _i13;
import 'package:asd_test/features/movies/domain/repositories/movie_repository.dart'
    as _i2;
import 'package:asd_test/features/movies/domain/usecase/add_remove_fav_usecase.dart'
    as _i16;
import 'package:asd_test/features/movies/domain/usecase/get_favs_usecase.dart'
    as _i14;
import 'package:asd_test/features/movies/domain/usecase/get_movie_cast_usecase.dart'
    as _i4;
import 'package:asd_test/features/movies/domain/usecase/get_popular_movies_usecase.dart'
    as _i9;
import 'package:asd_test/features/movies/domain/usecase/search_movie_usecase.dart'
    as _i12;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieRepository_0 extends _i1.SmartFake
    implements _i2.MovieRepository {
  _FakeMovieRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetMovieCastUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieCastUsecase extends _i1.Mock
    implements _i4.GetMovieCastUsecase {
  MockGetMovieCastUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.MovieRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Cast>>> call(
    _i8.GetMovieCastParam? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, List<_i7.Cast>>>.value(
                  _FakeEither_1<_i6.Failure, List<_i7.Cast>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Cast>>>);
}

/// A class which mocks [GetPopularMoviesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularMoviesUseCase extends _i1.Mock
    implements _i9.GetPopularMoviesUseCase {
  MockGetPopularMoviesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.MovieRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i10.MovieEntity>>> call(
    _i11.GetPopularMoviesParam? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<
              _i3.Either<_i6.Failure, List<_i10.MovieEntity>>
            >.value(
              _FakeEither_1<_i6.Failure, List<_i10.MovieEntity>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i10.MovieEntity>>>);
}

/// A class which mocks [SearchMovieUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchMovieUsecase extends _i1.Mock
    implements _i12.SearchMovieUsecase {
  MockSearchMovieUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.MovieRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i10.MovieEntity>>> call(
    _i13.SearchMovieParam? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<
              _i3.Either<_i6.Failure, List<_i10.MovieEntity>>
            >.value(
              _FakeEither_1<_i6.Failure, List<_i10.MovieEntity>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i10.MovieEntity>>>);
}

/// A class which mocks [GetFavsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFavsUsecase extends _i1.Mock implements _i14.GetFavsUsecase {
  MockGetFavsUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.MovieRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<String>>> call(
    _i15.NoParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, List<String>>>.value(
                  _FakeEither_1<_i6.Failure, List<String>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<String>>>);
}

/// A class which mocks [AddRemoveFavUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddRemoveFavUsecase extends _i1.Mock
    implements _i16.AddRemoveFavUsecase {
  MockAddRemoveFavUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeMovieRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.MovieRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<String>>> call(
    _i17.AddRemoveFavParam? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, List<String>>>.value(
                  _FakeEither_1<_i6.Failure, List<String>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<String>>>);
}
